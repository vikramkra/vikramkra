#include <iostream>
	#include <vector>
	#include <algorithm>
	using namespace std;
	
	struct Edge {
	intsrc, dest;
	};
	
	
	class Graph
	{
	public:
	
	
	    vector<vector<int>>adjList;
	
	
	    Graph(vector<Edge>const&edges, int N)
	    {
	
	adjList.resize(N);
	
	
	        for (auto &edge: edges) {
	adjList[edge.src].push_back(edge.dest);
	        }
	    }
	};
	
	
	void DFS(Graph const&graph, int v, vector<bool>&visited)
	{
	
	    visited[v] = true;
	
	
	    for (int u: graph.adjList[v])
	    {
	
	        if (!visited[u]) {
	            DFS(graph, u, visited);
	        }
	    }
	}
	
	
	bool check(Graph const&graph, int N)
	{
	
	    for (inti = 0; i< N; i++)
	    {
	
	        vector<bool> visited(N);
	
	
	        DFS(graph, i, visited);
	
	
	        if (find(visited.begin(), visited.end(), false) != visited.end()) {
	            return false;
	        }
	    }
	
	    return true;
	}
	
	int main()
	{
	
	    vector<Edge> edges = {
	        {0, 4}, {1, 0}, {1, 2}, {2, 1}, {2, 4},
	        {3, 1}, {3, 2}, {4, 3}
	    };
	
	
	int N = 5;
	
	
	    Graph graph(edges, N);
	
	
	    if (check(graph, N)) {
	cout<< "The graph is strongly connected";
	    }
	    else {
	cout<< "The graph is not strongly connected";
	    }
	
	    return 0;
	}
