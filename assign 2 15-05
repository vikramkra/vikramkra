#include<bits/stdc++.h> 
using namespace std; 




class Solution{   
public:
 struct TrieNode {
        int value;
        TrieNode* child[2];
    };
    
    TrieNode* getNode() {
        TrieNode* newNode = new TrieNode;
        newNode->value = 0;
        newNode->child[0] = NULL;
        newNode->child[1] = NULL;
        return newNode;
    }
    
    
    void insert(TrieNode* root, int key) {
        TrieNode* temp = root;
        for(int i=31;i>=0;i--) {
            bool set_bit = key & (1<<i);
            if(temp->child[set_bit] == NULL) {
                temp->child[set_bit] = getNode();
            }
            temp = temp->child[set_bit];
        }
        temp->value = key;
    }
    
    
    int maxxorutil(TrieNode* root, int key) {
        TrieNode* temp = root;
        for(int i=31;i>=0;i--) {
            bool set_bit = key & (1<<i);
            if(temp->child[1-set_bit] != NULL) {
                temp = temp->child[1-set_bit];
            } else if(temp->child[set_bit]!=NULL) {
                temp = temp->child[set_bit];
            }
        }
        return key ^ temp->value;
    }
    
    int maxSubarrayXOR(int N, int arr[]){    
        
        
        int max_value = 0;
        TrieNode* root = getNode();
        insert(root,0);
        int pre_xor = 0;
        for(int i=0;i<N;i++) {
            pre_xor = pre_xor^arr[i];
            insert(root, pre_xor);
            max_value = max(max_value, maxxorutil(root, pre_xor));
            
        }
        return max_value;
    }
};


int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        int N, X;
        cin >> N;
        int arr[N];
        for(int i = 0; i < N; i++){
            cin >> arr[i];
        }

        Solution ob;
        cout << ob.maxSubarrayXOR(N, arr) << endl;
    }
    return 0; 
}
